{
    "header": {
        "home": "Обо мне",
        "projects": "Проекты"
    },
    "footer": {
        "copyright": "Все права защищены авторским правом ©"
    },
    "projects": {
        "learnMore": "Узнать больше",
        "sourceCode": "Исходный код",
        "projectStack": "Стэк проекта",

        "nameWC": "Веб-чат с переводом в режиме реального времени",
        "descWC": "Приложение с возможностью перевода в режиме реального времени, которое нацелено на межкультурное и межязыковое взаимодействие.",
        "extendedDescWC": "INApp - это приложение для перевода в режиме реального времени, предназначенное для межкультурного и межъязыкового общения. Вы можете выбрать язык перевода из предложенных. И с этого момента все сообщения в текстовом чате будут переводиться на него. Более того, вы можете позвонить любому пользователю приложения (установить видео и аудиосвязь в реальном времени) - после этого вы сможете слышать и видеть своего собеседника, а также читать субтитры c его речью на выбранном вами языке. Что касается разработки - это Fullstack приложение с фронтендом на React, который взаимодействует с серверной частью по протоколам HTTP и WS, а также распознаёт речь с помощью Google Translate API. Бэкенд написан на NodeJs + Express с высокоуровневой микросервисной архитектурой. Он состоит из 3 микросервисов: микросервис шлюз - отвечает за JWT авторизацию и пересылку запросов в другие службы, микросервис перевода — отвечает за перевод всех текстов с использованием API Yandex-переводчика и микросервис чатов - при помощи веб-сокетов он реализует обмен сообщениями и метаданными с клиентской частью. Приложение было полностью развернуто в Azure. Фронтенд - с использованием VM + nginx. Бэкэнд - c использованием кластера Kubernetes + terraform.",
        "stackWC": "Fullstack приложение, написанное на React и NodeJs",

        "nameCompiler": "Веб-компилятор",
        "descCompiler": "Приложение, которое позволяет компилировать код на разных языках программирования и видеть результат его выполнения.",
        "extendedDescCompiler": "NW Compiler позволяет компилировать код на Python, C++ и JavaScript. Фронтенд был построен на React и MUI. Кроме того, для улучшения пользовательского опыта были добавлены локализация и темизация. Бэкенд был написан на NodeJs+Express с использованием монолитной верхнеуровневой архитектуры, целью которого является компиляция кода, полученного с помощью HTTP Post-запроса. Для того, чтобы скомпилировать полученный код - для него создается файл с расширением, соответствующим его языку. А с помощью дочернего процесса (модуля exec, встроенного в Nodejs) компиляция происходит на машине, с которой запущен сервер. Для этого используются предустановленные пакеты g++, node и python.",
        "stackCompiler": "Fullstack приложение, написанное на React и NodeJs",

        "nameBC": "Чат, имитирующий ответы от ИИ",
        "descBC": "Это веб-приложение имитирует пользовательский интерфейс и ответы на вопросы, как в ChatGPT.",
        "extendedDescBC": "Приложение, предоставляющее пользователю приятный интерфейс и возможность отправлять различные вопросы в формате сообщения и получать на них ответы от сервера. Данный чат был написан на React с использованием модульной фронтенд архитектуры и упакован через Vite. Главной особенностью этого приложения является использование нового метода, добавленного в fetch API, — потоковой обработки. Данные с сервера поступают в формате чанков. Для их обработки открывается поток на чтение данных. Каждый чанк декодируется в цикле и постепенно формирует ответ пользователю, создавая эффект чат-бота.",
        "stackBC": "React приложение",

        "namePolicy": "Приложение страхования",
        "descPolicy": "В данном веб-приложении реализован удобный процесс страхования, крутой пользовательский интерфейс и функционал.",
        "extendedDescPolicy": "Policy позволяет приобрести страховку онлайн для различных типов имущества. Это приложение было сделано в рамках заказной разработки и написано на React с использованием библиотеки пользовательского интерфейса Ant Design и модульной фронтенд архитектуры для лучшей масштабируемости. По договоренности была реализована только часть функционала — основная адаптивная страница с локализацией и бизнес-процессом оформления автострахования. Весь интерфейс выполнен на основе макетов Figma, сделанных дизайнером. На данный момент исходный код приложения передан сторонней команде разработчиков для дальнейшей разработки.",
        "stackPolicy": "React приложение",

        "namePortfolio": "Это портфолио",
        "descPortfolio": "Это веб-приложение было создано для удобного и структурированного размещения информации обо мне и моих проектах. Надеюсь, это получилось :)",
        "extendedDescPortfolio": "Мое портфолио выполнено в виде CV в веб-формате для дополнительного удобства. Оно содержит информацию обо мне, о моём опыте работы и навыках. Портфолио было написано на NextJs 13v с использованием модульной фронтенд архитектуры. Кроме того, я решил добавить информацию о своих последних и лучших проектах в специальный раздел. К сожалению, большинство моих проектов подпадают под NDA, поэтому я не могу поделиться ими здесь. Но многие другие проекты, о которых я не упомянул в данном разделе - хранятся у меня на GitHub по ссылке ниже. Среди них множество сверстанных макетов, простых веб-приложений для отработки навыков и веб-приложений, написанных на различных фреймворках. Есть также и консольные приложения на различных языках программирования.",
        "stackPortfolio": "Next приложение"
    },
    "home": {
        "name": "Никита Аверочкин",
        "contacts": "Контакты",
        "tel": "Телефон",
        "mail": "Почта",
        "address": "Адрес",
        "addressLocation": "Россия, Воронеж",
        "linkedIn": "Профиль на Linkedin",
        "skills": "Навыки",
        "education": "Образование",
        "institution": "Воронежский Государственный Университет",
        "institutionDirection": "Фундаментальная информатика и информационные технологии (бакалавр)",
        "languages": "Языки",
        "russian": "Русский",
        "english": "Английский",

        "aboutMe": "Я занимаюсь разработкой SPA/веб-ресурсов более 4 лет. В своих проектах я использую современные технологии: Typescript, React, Vue, Svetle. Хорошо разбираюсь в дизайне, адаптивной кроссбраузерной верстке, ES6+ синтаксисе. Я постоянно работаю над архитектурой и бизнес-логикой веб-приложений, пишу тесты, а также работаю с внешними API. Стараюсь постоянно расширять свой кругозор в разработке, поэтому имею опыт написания fullstack проектов с верхнеуровневой микросервисной архитекрутой (стэк: NodeJs, Express, Mongo, RabbitMq) с использованием Docker, Docker-compose и облачных хранилищ. Мой главный навык — быстро погружаться в любой новый проект и сразу вносить в него ощутимый вклад. То же самое происходит, когда я изучаю новые технологии — мой опыт позволяет мне быстро разобраться во всём. Также я умею работать в команде и находить общий язык!",

        "jobTitleIt1": "JS-разработчик",
        "jobTitleShared": "Фронтенд разработчик",
        "workingProcess": "Рабочий процесс",
        "experience": "Опыт работы",

        "it1": "ИТ1",
        "locationIt1": "Москва, Россия (Удаленно)",
        "yearsIt1": "Июнь 2023 — по настоящее время",
        "descriptionIt1": "Разработка корпоративного портала заявок на HP Service Manager для Газпромбанка. Занимался поддержкой существующего функционала - рефакторинг существующего кода, исправление различных дефектов, а также написание нового кода и бизнес логики на Javascript спецификации ES5 и языке RAD. Использовал SOAP API для написания новых запросов получения данных в XML, а также дорабатывал текущие запросы.",

        "calendaria": "Calendaria",
        "locationCalendaria": "Алматы, Казахстан (Удаленно)",
        "yearsCalendaria": "Ноябрь 2022 — Май 2023",
        "descriptionCalendaria": "Занимался одним проектом - с нуля разрабатывал web IAM приложение. Настраивал модульную frontend архитектуру данного приложения на React с кастомной конфигурацией (webpack, plugins, babel). Учавствовал в аналитике проекта и писал бизнес логику исходя из ТЗ, использовал связку React+Typescript. Взаимодействовал с командой дизайна - по figma верстал и стилизовал приложение, а также создавал переиспользуемые UI компоненты на базе библиотеки Ant disign. Также взаимодействовал с командой backend разработки - получал данные по Rest Api, обменивались мыслями по поводу реализации различных фич.",

        "tecom": "Tecom",
        "locationTecom": "Nizhny Novgorod, Russia (Удаленно)",
        "yearsTecom": "Февраль 2022 — Ноябрь 2022",
        "descriptionTecom": "Занимался различными проектами: Библиотекой UI компонентов. Библиотекой готовых утилит со своим store, с различными экшенами и селекторами. Разрабатывал 3 различных встраиваемых виджета - диаграммы, pdf отчеты, графики (написан с нуля). Также, я учавствовал в разработке основного приложения удаленного мониторинга устройств. Занимался поддержкой существующего функционала - исправлял баги и рефакторил код, а также писал новый код и бизнес-логику. К каждому проекту разрабатывал различные функциональные React компоненты. Для UI библиотеки это были переписанные компоненты из material-UI, для виджетов - свои изолированные модули. Покрывал проекты unit тестами, используя jest, а также e2e тестами, используя playwright.",

        "julius": "Julius",
        "locationJulius": "Лондон, Великобритания (Удаленно)",
        "yearsJulius": "Октябрь 2021 — Февраль 2022",
        "descriptionJulius": "Разрабатывал интерфейс для веб-приложения с нейронными сетями на серверной части. Готовил его к выходу в продакшн. Работал парт-тайм в небольшой команде из 7 человек. Занимался переписыванием свойств Antd компонентов на scss, выносил переиспользуемые значения свойств в scss переменные. Дополнял, а также полностью переделывал верстку уже готовых компонентов. Создавал новые компоненты (таблицы, highcharts дэшборд). Писал новую бизнес логику, использовал связку React+Typescript. Для получения данных с сервера использовал React Relay и язык graphql. Взаимодействовал с лидом проекта по frontend разработки. Реализовывал таски исходя из поставленных им требований. Обменивался с ним мыслями по поводу реализации различных фич. Использовал graphql сервер документации, а также дополнительно обсуждал с backend разработчиком формат и сами данные, передаваемые в queries."
    }
}